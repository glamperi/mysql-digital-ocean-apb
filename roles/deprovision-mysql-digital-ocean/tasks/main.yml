- name: get droplet information based on tag
  uri:
    url: "https://api.digitalocean.com/v2/tags/{{_apb_service_instance_id}}"
    headers:
      Authorization: "Bearer {{ api_key }}"
    method: GET
  register: response

- name: print droplet id
  debug:
    msg: "{{response.json.tag.resources.droplets.last_tagged.id}}"

- name: delete droplet
  digital_ocean:
    state: deleted
    api_token: "{{ api_key }}"
    id: "{{response.json.tag.resources.droplets.last_tagged.id}}"

- name: list all ssh keys
  uri:
    url: "https://api.digitalocean.com/v2/account/keys"
    headers:
      Authorization: "Bearer {{ api_key }}"
    method: GET
  register: key_response

- name: delete keys
  uri:
    url: "https://api.digitalocean.com/v2/account/keys/{{item.id}}"
    headers:
      Authorization: "Bearer {{ api_key }}"
      Content-Type: "application/json"
    method: DELETE
    status_code: 200,201,204
  when: item.name == _apb_service_instance_id
  with_items: "{{ key_response.json.ssh_keys | list}} "
  ignore_errors: yes

- name: "delete {{service_name}} endpoint"
  k8s_v1_endpoints:
    name: "{{service_name}}"
    namespace: '{{ namespace }}'
    state: absent
  ignore_errors: yes

- name: "delete {{service_name}} service"
  k8s_v1_service:
    name: "{{service_name}}"
    namespace: '{{ namespace }}'
    state: absent
  ignore_errors: yes
  
- name: "delete {{service_name}}-key service"
  k8s_v1_secret:
    name: "{{service_name}}-key"
    namespace: '{{ namespace }}'
    state: absent
  ignore_errors: yes
